import logging
import os
import json
import requests
from datetime import datetime
from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, types, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.methods.send_message import SendMessage
import re

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
SSO_SERVICE_URL = os.getenv("SSO_SERVICE_URL", "http://localhost:8080")

# –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å –Ω–∞ –ë–î, –Ω–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–∏—Ç–æ–Ω–æ–≤—Å–∫–æ–º —Å–ª–æ–≤–∞—Ä–µ
user_tokens = {}

class AuthStates(StatesGroup):
    waiting_for_login = State()
    waiting_for_password = State()

bot = Bot(token=TOKEN)
dp = Dispatcher()

def escape_md(text):
    if text is None:
        return ""
    
    text = str(text)
    
    chars_to_escape = '_*[]()~`>#+-=|{}.!'
    for char in chars_to_escape:
        text = text.replace(char, f"\\{char}")
    
    return text

def format_logs_html(logs):
    if not logs:
        return "–õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
    
    formatted_logs = "<b>üìã –õ–û–ì–ò –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò</b>\n\n"
    
    for log in logs:
        timestamp = log.get("timestamp", "")
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                timestamp = dt.strftime("%Y-%m-%d %H:%M:%S")
            except:
                pass
        
        user = log.get("email", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å")
        success = log.get("success", False)
        ip = log.get("ip", "")
        user_agent = log.get("user_agent", "")
        
        formatted_logs += f"üïí <b>{timestamp}</b>\n"
        formatted_logs += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{user}</code>\n"
        
        if success:
            formatted_logs += f"‚úÖ –°—Ç–∞—Ç—É—Å: <code>–£—Å–ø–µ—à–Ω–æ</code>\n"
        else:
            formatted_logs += f"‚ùå –°—Ç–∞—Ç—É—Å: <code>–ù–µ—É—Å–ø–µ—à–Ω–æ</code>\n"
            
        formatted_logs += f"üåê IP-–∞–¥—Ä–µ—Å: <code>{ip}</code>\n"
        formatted_logs += f"üîπ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Ö–æ–¥–∞: <code>{user_agent}</code>\n\n"
        formatted_logs += "-------------------\n\n"
    
    return formatted_logs

def get_main_keyboard():
    keyboard = [
        [InlineKeyboardButton(text="–í–æ–π—Ç–∏", callback_data="login")],
        [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏", callback_data="get_logs")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    await message.answer(
        "–ë–æ—Ç –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ª–æ–≥–∏ —Å —Å–µ—Ä–≤–∏—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

@dp.callback_query(F.data == "login")
async def login_callback(callback: types.CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
    await state.set_state(AuthStates.waiting_for_login)

@dp.message(AuthStates.waiting_for_login)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–ü–∞—Ä–æ–ª—å:")
    await state.set_state(AuthStates.waiting_for_password)

@dp.message(AuthStates.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data.get('login', '')
    password = message.text
    
    try:
        response = requests.post(
            f"{SSO_SERVICE_URL}/api/login",
            json={"email": login, "password": password}
        )
        
        if response.status_code == 200:
            token_data = response.json()
            token = token_data.get("token", "")
            user_tokens[message.from_user.id] = token
            
            await message.answer("–£—Å–ø–µ—Ö. –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ª–æ–≥–∏")
        else:
            await message.answer(f"–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {response.text}")
    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
    await state.clear()

@dp.callback_query(F.data == "get_logs")
async def get_logs_callback(callback: types.CallbackQuery):
    await callback.answer()
    
    user_id = callback.from_user.id
    if user_id not in user_tokens:
        await callback.message.edit_text(
            "–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return
    
    token = user_tokens[user_id]
    try:
        response = requests.get(
            f"{SSO_SERVICE_URL}/api/protected/logs",
            headers={"Authorization": f"Bearer {token}"}
        )
        
        if response.status_code == 200:
            logs = response.json()
            
            formatted_logs = format_logs_html(logs)
            
            if len(formatted_logs) > 4000:
                for i in range(0, len(formatted_logs), 4000):
                    chunk = formatted_logs[i:i+4000]
                    try:
                        await callback.message.answer(
                            text=chunk,
                            parse_mode="HTML"
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML: {str(e)}")
                        await callback.message.answer(
                            text="–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                        )
                        await callback.message.answer(
                            text=re.sub(r'<[^>]+>', '', chunk)
                        )
            else:
                try:
                    await callback.message.answer(
                        text=formatted_logs,
                        parse_mode="HTML"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML: {str(e)}")
                    await callback.message.answer(
                        text="–ë–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
                    )
                    await callback.message.answer(
                        text=re.sub(r'<[^>]+>', '', formatted_logs)
                    )
        else:
            await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {response.text}")
    except Exception as e:
        await callback.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

@dp.message(Command("cancel"))
async def cmd_cancel(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

async def main():
    if not TOKEN:
        logger.error("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –≤ env (TELEGRAM_BOT_TOKEN)")
        return

    await dp.start_polling(bot)

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())